-- QBCore = exports['qb-core']:GetCoreObject()
-- VehicleStatus = {}

-- local ClosestPlate = nil
-- local PlayerJob = {}
-- local onDuty = false
-- local effectTimer = 0
-- local openingDoor = false

-- -- zone check
-- local isInsideDutyZone = false
-- local isInsideStashZone = false
-- local insideStashZone
-- local isInsideGarageZone = false
-- local insideGarageData = {}
-- local isInsideVehiclePlateZone = false
-- local plateZones = {}
-- local plateTargetBoxID = 'plateTarget_'
-- local dutyTargetBoxID = 'dutyTarget_'
-- local stashTargetBoxID = 'stashTarget_'

-- -- Exports

-- local function GetVehicleStatusList(plate)
--     local retval = nil
--     if VehicleStatus[plate] ~= nil then
--         retval = VehicleStatus[plate]
--     end
--     return retval
-- end

-- local function GetVehicleStatus(plate, part)
--     local retval = nil
--     if VehicleStatus[plate] ~= nil then
--         retval = VehicleStatus[plate][part]
--     end
--     return retval
-- end

-- local function SetVehicleStatus(plate, part, level)
--     TriggerServerEvent("vehiclemod:server:updatePart", plate, part, level)
-- end

-- exports('GetVehicleStatusList', GetVehicleStatusList)
-- exports('GetVehicleStatus', GetVehicleStatus)
-- exports('SetVehicleStatus', SetVehicleStatus)

-- -- Functions

-- local function DeleteTarget(id)
--     if Config.UseTarget then
--         exports['qb-target']:RemoveZone(id)
--     else
--         if Config.Targets[id] and Config.Targets[id].zone then
--             Config.Targets[id].zone:destroy();
--         end
--     end

--     Config.Targets[id] = nil
-- end

-- local function RegisterDutyTarget()
--     for k, v in ipairs(Config.Locations['duty']) do
--         local coords = v[1]
--         local boxData = Config.Targets[dutyTargetBoxID .. k] or {}

--         if boxData and boxData.created then
--             return
--         end

--         if not Config.Jobs[PlayerJob.name] then
--             return
--         end

--         if Config.UseTarget then
--             exports['qb-target']:AddBoxZone(dutyTargetBoxID .. k, coords, 1.5, 1.5, {
--                 name = dutyTargetBoxID .. k,
--                 heading = 0,
--                 debugPoly = false,
--                 minZ = coords.z - 1.0,
--                 maxZ = coords.z + 1.0
--             }, {
--                 options = {{
--                     type = "server",
--                     event = "QBCore:ToggleDuty",
--                     label = 'Toggle Duty'
--                 }},
--                 distance = 2.0
--             })

--             Config.Targets[dutyTargetBoxID .. k] = {
--                 created = true
--             }
--         else
--             local zone = BoxZone:Create(coords, 1.5, 1.5, {
--                 name = dutyTargetBoxID .. k,
--                 heading = 0,
--                 debugPoly = false,
--                 minZ = coords.z - 1.0,
--                 maxZ = coords.z + 1.0
--             })
--             zone:onPlayerInOut(function(isPointInside)
--                 if isPointInside then
--                     exports['qb-core']:DrawText("[E] Toggle Duty", 'left')
--                 else
--                     exports['qb-core']:HideText()
--                 end

--                 isInsideDutyZone = isPointInside
--             end)

--             Config.Targets[dutyTargetBoxID .. k] = {
--                 created = true,
--                 zone = zone
--             }
--         end
--     end
-- end

-- local function RegisterStashTarget()
--     for k, v in ipairs(Config.Locations['stash']) do
--         local coords = v[1]
--         local boxData = Config.Targets[stashTargetBoxID .. k] or {}

--         if boxData and boxData.created then
--             return
--         end

--         if not Config.Jobs[PlayerJob.name] then
--             return
--         end

--         if Config.UseTarget then
--             exports['qb-target']:AddBoxZone(stashTargetBoxID .. k, coords, 1.5, 1.5, {
--                 name = stashTargetBoxID .. k,
--                 heading = 0,
--                 debugPoly = false,
--                 minZ = coords.z - 1.0,
--                 maxZ = coords.z + 1.0
--             }, {
--                 options = {{
--                     type = "client",
--                     event = "qb-mechanicjob:client:target:OpenStash",
--                     label = "Open Stash"
--                 }},
--                 distance = 2.0
--             })

--             Config.Targets[stashTargetBoxID .. k] = {
--                 created = true
--             }
--         else
--             local zone = BoxZone:Create(coords, 1.5, 1.5, {
--                 name = stashTargetBoxID .. k,
--                 heading = 0,
--                 debugPoly = false,
--                 minZ = coords.z - 1.0,
--                 maxZ = coords.z + 1.0
--             })
--             zone:onPlayerInOut(function(isPointInside)
--                 if isPointInside then
--                     exports['qb-core']:DrawText("[E] Open Stash", 'left')
--                 else
--                     exports['qb-core']:HideText()
--                 end

--                 isInsideStashZone = isPointInside
--                 insideStashZone = stashTargetBoxID .. k
--             end)

--             Config.Targets[stashTargetBoxID .. k] = {
--                 created = true,
--                 zone = zone
--             }
--         end
--     end
-- end

-- local function RegisterGarageZone()
--     for k, v in ipairs(Config.Locations['vehicle']) do
--         local coords = v[1]
--         local vehicleZone = BoxZone:Create(vector3(coords.x, coords.y, coords.z), 5, 15, {
--             name = 'vehicleZone',
--             heading = 340.0,
--             minZ = coords.z - 1.0,
--             maxZ = coords.z + 5.0,
--             debugPoly = false
--         })

--         vehicleZone:onPlayerInOut(function(isPointInside)
--             if isPointInside and onDuty then
--                 local inVehicle = IsPedInAnyVehicle(PlayerPedId())
--                 if inVehicle then
--                     exports['qb-core']:DrawText('[E] Hide Vehicle', 'left')
--                 else
--                     exports['qb-core']:DrawText('[E] Get Vehicle', 'left')
--                 end
--             else
--                 exports['qb-core']:HideText()
--             end

--             isInsideGarageZone = isPointInside
--             insideGarageData = coords
--         end)
--     end
-- end

-- function DestroyVehiclePlateZone(id)
--     if plateZones[id] then
--         plateZones[id]:destroy()
--         plateZones[id] = nil
--     end
-- end

-- function RegisterVehiclePlateZone(id, plate)
--     local coords = plate.coords
--     local boxData = plate.boxData
--     local plateZone = BoxZone:Create(vector3(coords.x, coords.y, coords.z), boxData.length, boxData.width, {
--         name = plateTargetBoxID .. id,
--         heading = boxData.heading,
--         minZ = coords.z - 1.0,
--         maxZ = coords.z + 3.0,
--         debugPoly = boxData.debugPoly
--     })

--     plateZones[id] = plateZone

--     plateZone:onPlayerInOut(function(isPointInside)
--         if isPointInside and onDuty then
--             if plate.AttachedVehicle then
--                 exports['qb-core']:DrawText('[E] Open Menu', 'left')
--             else
--                 if IsPedInAnyVehicle(PlayerPedId()) then
--                     exports['qb-core']:DrawText('[E] Work On Vehicle', 'left')
--                 end
--             end
--         else
--             exports['qb-core']:HideText()
--         end

--         isInsideVehiclePlateZone = isPointInside
--     end)
-- end

-- local function SetVehiclePlateZones()
--     if Config.Plates and next(Config.Plates) then
--         for id, plate in pairs(Config.Plates) do
--             RegisterVehiclePlateZone(id, plate)
--         end
--     else
--         print('No vehicle plates configured')
--     end
-- end

-- local function loadAnimDict(dict)
--     while (not HasAnimDictLoaded(dict)) do
--         RequestAnimDict(dict)
--         Wait(5)
--     end
-- end

-- local function SetClosestPlate()
--     local pos = GetEntityCoords(PlayerPedId(), true)
--     local current = nil
--     local dist = nil
--     for id, _ in pairs(Config.Plates) do
--         if current ~= nil then
--             if #(pos - vector3(Config.Plates[id].coords.x, Config.Plates[id].coords.y, Config.Plates[id].coords.z)) <
--                 dist then
--                 current = id
--                 dist = #(pos -
--                            vector3(Config.Plates[id].coords.x, Config.Plates[id].coords.y, Config.Plates[id].coords.z))
--             end
--         else
--             dist = #(pos - vector3(Config.Plates[id].coords.x, Config.Plates[id].coords.y, Config.Plates[id].coords.z))
--             current = id
--         end
--     end
--     ClosestPlate = current
-- end

-- local function ScrapAnim(time)
--     local time = time / 1000
--     loadAnimDict("mp_car_bomb")
--     TaskPlayAnim(PlayerPedId(), "mp_car_bomb", "car_bomb_mechanic", 3.0, 3.0, -1, 16, 0, false, false, false)
--     openingDoor = true
--     CreateThread(function()
--         while openingDoor do
--             TaskPlayAnim(PlayerPedId(), "mp_car_bomb", "car_bomb_mechanic", 3.0, 3.0, -1, 16, 0, 0, 0, 0)
--             Wait(2000)
--             time = time - 2
--             if time <= 0 then
--                 openingDoor = false
--                 StopAnimTask(PlayerPedId(), "mp_car_bomb", "car_bomb_mechanic", 1.0)
--             end
--         end
--     end)
-- end

-- local function ApplyEffects(vehicle)
--     local plate = QBCore.Functions.GetPlate(vehicle)
--     if GetVehicleClass(vehicle) ~= 13 and GetVehicleClass(vehicle) ~= 21 and GetVehicleClass(vehicle) ~= 16 and
--         GetVehicleClass(vehicle) ~= 15 and GetVehicleClass(vehicle) ~= 14 then
--         if VehicleStatus[plate] ~= nil then
--             local chance = math.random(1, 100)
--             if VehicleStatus[plate]["radiator"] <= 80 and (chance >= 1 and chance <= 20) then
--                 local engineHealth = GetVehicleEngineHealth(vehicle)
--                 if VehicleStatus[plate]["radiator"] <= 80 and VehicleStatus[plate]["radiator"] >= 60 then
--                     SetVehicleEngineHealth(vehicle, engineHealth - math.random(10, 15))
--                 elseif VehicleStatus[plate]["radiator"] <= 59 and VehicleStatus[plate]["radiator"] >= 40 then
--                     SetVehicleEngineHealth(vehicle, engineHealth - math.random(15, 20))
--                 elseif VehicleStatus[plate]["radiator"] <= 39 and VehicleStatus[plate]["radiator"] >= 20 then
--                     SetVehicleEngineHealth(vehicle, engineHealth - math.random(20, 30))
--                 elseif VehicleStatus[plate]["radiator"] <= 19 and VehicleStatus[plate]["radiator"] >= 6 then
--                     SetVehicleEngineHealth(vehicle, engineHealth - math.random(30, 40))
--                 else
--                     SetVehicleEngineHealth(vehicle, engineHealth - math.random(40, 50))
--                 end
--             end

--             if VehicleStatus[plate]["axle"] <= 80 and (chance >= 21 and chance <= 40) then
--                 if VehicleStatus[plate]["axle"] <= 80 and VehicleStatus[plate]["axle"] >= 60 then
--                     for i = 0, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                 elseif VehicleStatus[plate]["axle"] <= 59 and VehicleStatus[plate]["axle"] >= 40 then
--                     for i = 0, 360 do
--                         Wait(10)
--                         SetVehicleSteeringScale(vehicle, i)
--                     end
--                 elseif VehicleStatus[plate]["axle"] <= 39 and VehicleStatus[plate]["axle"] >= 20 then
--                     for i = 0, 360 do
--                         Wait(15)
--                         SetVehicleSteeringScale(vehicle, i)
--                     end
--                 elseif VehicleStatus[plate]["axle"] <= 19 and VehicleStatus[plate]["axle"] >= 6 then
--                     for i = 0, 360 do
--                         Wait(20)
--                         SetVehicleSteeringScale(vehicle, i)
--                     end
--                 else
--                     for i = 0, 360 do
--                         Wait(25)
--                         SetVehicleSteeringScale(vehicle, i)
--                     end
--                 end
--             end

--             if VehicleStatus[plate]["brakes"] <= 80 and (chance >= 41 and chance <= 60) then
--                 if VehicleStatus[plate]["brakes"] <= 80 and VehicleStatus[plate]["brakes"] >= 60 then
--                     SetVehicleHandbrake(vehicle, true)
--                     Wait(1000)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["brakes"] <= 59 and VehicleStatus[plate]["brakes"] >= 40 then
--                     SetVehicleHandbrake(vehicle, true)
--                     Wait(3000)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["brakes"] <= 39 and VehicleStatus[plate]["brakes"] >= 20 then
--                     SetVehicleHandbrake(vehicle, true)
--                     Wait(5000)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["brakes"] <= 19 and VehicleStatus[plate]["brakes"] >= 6 then
--                     SetVehicleHandbrake(vehicle, true)
--                     Wait(7000)
--                     SetVehicleHandbrake(vehicle, false)
--                 else
--                     SetVehicleHandbrake(vehicle, true)
--                     Wait(9000)
--                     SetVehicleHandbrake(vehicle, false)
--                 end
--             end

--             if VehicleStatus[plate]["clutch"] <= 80 and (chance >= 61 and chance <= 80) then
--                 if VehicleStatus[plate]["clutch"] <= 80 and VehicleStatus[plate]["clutch"] >= 60 then
--                     SetVehicleHandbrake(vehicle, true)
--                     SetVehicleEngineOn(vehicle, 0, 0, 1)
--                     SetVehicleUndriveable(vehicle, true)
--                     Wait(50)
--                     SetVehicleEngineOn(vehicle, 1, 0, 1)
--                     SetVehicleUndriveable(vehicle, false)
--                     for i = 1, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                     Wait(500)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["clutch"] <= 59 and VehicleStatus[plate]["clutch"] >= 40 then
--                     SetVehicleHandbrake(vehicle, true)
--                     SetVehicleEngineOn(vehicle, 0, 0, 1)
--                     SetVehicleUndriveable(vehicle, true)
--                     Wait(100)
--                     SetVehicleEngineOn(vehicle, 1, 0, 1)
--                     SetVehicleUndriveable(vehicle, false)
--                     for i = 1, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                     Wait(750)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["clutch"] <= 39 and VehicleStatus[plate]["clutch"] >= 20 then
--                     SetVehicleHandbrake(vehicle, true)
--                     SetVehicleEngineOn(vehicle, 0, 0, 1)
--                     SetVehicleUndriveable(vehicle, true)
--                     Wait(150)
--                     SetVehicleEngineOn(vehicle, 1, 0, 1)
--                     SetVehicleUndriveable(vehicle, false)
--                     for i = 1, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                     Wait(1000)
--                     SetVehicleHandbrake(vehicle, false)
--                 elseif VehicleStatus[plate]["clutch"] <= 19 and VehicleStatus[plate]["clutch"] >= 6 then
--                     SetVehicleHandbrake(vehicle, true)
--                     SetVehicleEngineOn(vehicle, 0, 0, 1)
--                     SetVehicleUndriveable(vehicle, true)
--                     Wait(200)
--                     SetVehicleEngineOn(vehicle, 1, 0, 1)
--                     SetVehicleUndriveable(vehicle, false)
--                     for i = 1, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                     Wait(1250)
--                     SetVehicleHandbrake(vehicle, false)
--                 else
--                     SetVehicleHandbrake(vehicle, true)
--                     SetVehicleEngineOn(vehicle, 0, 0, 1)
--                     SetVehicleUndriveable(vehicle, true)
--                     Wait(250)
--                     SetVehicleEngineOn(vehicle, 1, 0, 1)
--                     SetVehicleUndriveable(vehicle, false)
--                     for i = 1, 360 do
--                         SetVehicleSteeringScale(vehicle, i)
--                         Wait(5)
--                     end
--                     Wait(1500)
--                     SetVehicleHandbrake(vehicle, false)
--                 end
--             end

--             if VehicleStatus[plate]["fuel"] <= 80 and (chance >= 81 and chance <= 100) then
--                 local fuel = exports['LegacyFuel']:GetFuel(vehicle)
--                 if VehicleStatus[plate]["fuel"] <= 80 and VehicleStatus[plate]["fuel"] >= 60 then
--                     exports['LegacyFuel']:SetFuel(vehicle, fuel - 2.0)
--                 elseif VehicleStatus[plate]["fuel"] <= 59 and VehicleStatus[plate]["fuel"] >= 40 then
--                     exports['LegacyFuel']:SetFuel(vehicle, fuel - 4.0)
--                 elseif VehicleStatus[plate]["fuel"] <= 39 and VehicleStatus[plate]["fuel"] >= 20 then
--                     exports['LegacyFuel']:SetFuel(vehicle, fuel - 6.0)
--                 elseif VehicleStatus[plate]["fuel"] <= 19 and VehicleStatus[plate]["fuel"] >= 6 then
--                     exports['LegacyFuel']:SetFuel(vehicle, fuel - 8.0)
--                 else
--                     exports['LegacyFuel']:SetFuel(vehicle, fuel - 10.0)
--                 end
--             end
--         end
--     end
-- end

-- local function round(num, numDecimalPlaces)
--     return tonumber(string.format("%." .. (numDecimalPlaces or 1) .. "f", num))
-- end

-- local function SendStatusMessage(statusList)
--     if statusList ~= nil then
--         TriggerEvent('chat:addMessage', {
--             template = '<div class="chat-message normal"><div class="chat-message-body"><strong>{0}:</strong><br><br> <strong>' ..
--                 Config.ValuesLabels["engine"] .. ' (engine):</strong> {1} <br><strong>' .. Config.ValuesLabels["body"] ..
--                 ' (body):</strong> {2} <br><strong>' .. Config.ValuesLabels["radiator"] ..
--                 ' (radiator):</strong> {3} <br><strong>' .. Config.ValuesLabels["axle"] ..
--                 ' (axle):</strong> {4}<br><strong>' .. Config.ValuesLabels["brakes"] ..
--                 ' (brakes):</strong> {5}<br><strong>' .. Config.ValuesLabels["clutch"] ..
--                 ' (clutch):</strong> {6}<br><strong>' .. Config.ValuesLabels["fuel"] ..
--                 ' (fuel):</strong> {7}</div></div>',
--             args = {'Vehicle Status', round(statusList["engine"]) .. "/" .. Config.MaxStatusValues["engine"] .. " (" ..
--                 QBCore.Shared.Items["advancedrepairkit"]["label"] .. ")",
--                     round(statusList["body"]) .. "/" .. Config.MaxStatusValues["body"] .. " (" ..
--                 QBCore.Shared.Items[Config.RepairCost["body"]]["label"] .. ")",
--                     round(statusList["radiator"]) .. "/" .. Config.MaxStatusValues["radiator"] .. ".0 (" ..
--                 QBCore.Shared.Items[Config.RepairCost["radiator"]]["label"] .. ")",
--                     round(statusList["axle"]) .. "/" .. Config.MaxStatusValues["axle"] .. ".0 (" ..
--                 QBCore.Shared.Items[Config.RepairCost["axle"]]["label"] .. ")",
--                     round(statusList["brakes"]) .. "/" .. Config.MaxStatusValues["brakes"] .. ".0 (" ..
--                 QBCore.Shared.Items[Config.RepairCost["brakes"]]["label"] .. ")",
--                     round(statusList["clutch"]) .. "/" .. Config.MaxStatusValues["clutch"] .. ".0 (" ..
--                 QBCore.Shared.Items[Config.RepairCost["clutch"]]["label"] .. ")",
--                     round(statusList["fuel"]) .. "/" .. Config.MaxStatusValues["fuel"] .. ".0 (" ..
--                 QBCore.Shared.Items[Config.RepairCost["fuel"]]["label"] .. ")"}
--         })
--     end
-- end

-- local function OpenMenu()
--     local OpenMenu = {{
--         header = "Vehicle Options",
--         isMenuHeader = true
--     }, {
--         header = "Disconnect Vehicle",
--         txt = "Unattach Vehicle in Lift",
--         params = {
--             event = "qb-mechanicjob:client:UnattachVehicle"
--         }
--     }, {
--         header = "Check Status",
--         txt = "Check Vehicle Status",
--         params = {
--             event = "qb-mechanicjob:client:CheckStatus",
--             args = {
--                 number = 1
--             }
--         }
--     }, {
--         header = "Vehicle Parts",
--         txt = "Repair Vehicle Parts",
--         params = {
--             event = "qb-mechanicjob:client:PartsMenu",
--             args = {
--                 number = 1
--             }
--         }
--     }, {
--         header = "⬅ Close Menu",
--         txt = "",
--         params = {
--             event = "qb-mechanicjob:client:target:CloseMenu"
--         }
--     }}
--     exports['qb-menu']:openMenu(OpenMenu)
-- end

-- local function PartsMenu()
--     local plate = QBCore.Functions.GetPlate(Config.Plates[ClosestPlate].AttachedVehicle)
--     if VehicleStatus[plate] ~= nil then
--         local vehicleMenu = {{
--             header = "Status",
--             isMenuHeader = true
--         }}
--         for k, v in pairs(Config.ValuesLabels) do
--             if math.ceil(VehicleStatus[plate][k]) ~= Config.MaxStatusValues[k] then
--                 local percentage = math.ceil(VehicleStatus[plate][k])
--                 if percentage > 100 then
--                     percentage = math.ceil(VehicleStatus[plate][k]) / 10
--                 end
--                 vehicleMenu[#vehicleMenu + 1] = {
--                     header = v,
--                     txt = "Status: " .. percentage .. ".0% / 100.0%",
--                     params = {
--                         event = "qb-mechanicjob:client:PartMenu",
--                         args = {
--                             name = v,
--                             parts = k
--                         }
--                     }
--                 }
--             else
--                 local percentage = math.ceil(Config.MaxStatusValues[k])
--                 if percentage > 100 then
--                     percentage = math.ceil(Config.MaxStatusValues[k]) / 10
--                 end
--                 vehicleMenu[#vehicleMenu + 1] = {
--                     header = v,
--                     txt = "Status: " .. percentage .. ".0% / 100.0%",
--                     params = {
--                         event = "qb-mechanicjob:client:NoDamage"
--                     }
--                 }
--             end
--         end
--         vehicleMenu[#vehicleMenu + 1] = {
--             header = "⬅ Close Menu",
--             txt = "",
--             params = {
--                 event = "qb-menu:client:closeMenu"
--             }
--         }
--         exports['qb-menu']:openMenu(vehicleMenu)
--     end

-- end

-- local function PartMenu(data)
--     local partName = data.name
--     local part = data.parts
--     local TestMenu1 = {{
--         header = "Part Menu",
--         isMenuHeader = true
--     }, {
--         header = "" .. partName .. "",
--         txt = "Repair : " .. QBCore.Shared.Items[Config.RepairCostAmount[part].item]["label"] .. " " ..
--             Config.RepairCostAmount[part].costs .. "x",
--         params = {
--             event = "qb-mechanicjob:client:RepairPart",
--             args = {
--                 part = part
--             }
--         }
--     }, {
--         header = "⬅ Back Menu",
--         txt = "Back to parts menu",
--         params = {
--             event = "qb-mechanicjob:client:PartsMenu"
--         }
--     }, {
--         header = "⬅ Close Menu",
--         txt = "",
--         params = {
--             event = "qb-menu:client:closeMenu"
--         }
--     }}

--     exports['qb-menu']:openMenu(TestMenu1)
-- end

-- local function NoDamage()
--     local NoDamage = {{
--         header = "No Damage",
--         isMenuHeader = true
--     }, {
--         header = "Back Menu",
--         txt = "There Is No Damage To This Part!",
--         params = {
--             event = "qb-mechanicjob:client:PartsMenu"
--         }
--     }, {
--         header = "⬅ Close Menu",
--         txt = "",
--         params = {
--             event = "qb-menu:client:closeMenu"
--         }
--     }}
--     exports['qb-menu']:openMenu(NoDamage)
-- end

-- local function UnattachVehicle()
--     DoScreenFadeOut(150)
--     Wait(150)
--     FreezeEntityPosition(Config.Plates[ClosestPlate].AttachedVehicle, false)
--     SetEntityCoords(Config.Plates[ClosestPlate].AttachedVehicle, Config.Plates[ClosestPlate].coords.x,
--         Config.Plates[ClosestPlate].coords.y, Config.Plates[ClosestPlate].coords.z)
--     SetEntityHeading(Config.Plates[ClosestPlate].AttachedVehicle, Config.Plates[ClosestPlate].coords.w)
--     TaskWarpPedIntoVehicle(PlayerPedId(), Config.Plates[ClosestPlate].AttachedVehicle, -1)
--     Wait(500)
--     DoScreenFadeIn(250)
--     Config.Plates[ClosestPlate].AttachedVehicle = nil
--     TriggerServerEvent('qb-vehicletuning:server:SetAttachedVehicle', false, ClosestPlate)

--     DestroyVehiclePlateZone(ClosestPlate)
--     RegisterVehiclePlateZone(ClosestPlate, Config.Plates[ClosestPlate])

-- end

-- local function SpawnListVehicle(model)
--     local coords = {
--         x = insideGarageData.x,
--         y = insideGarageData.y,
--         z = insideGarageData.z,
--         w = insideGarageData.w
--     }

--     QBCore.Functions.SpawnVehicle(model, function(veh)
--         SetVehicleNumberPlateText(veh, "ACBV" .. tostring(math.random(1000, 9999)))
--         SetEntityHeading(veh, coords.w)
--         exports['LegacyFuel']:SetFuel(veh, 100.0)
--         TaskWarpPedIntoVehicle(PlayerPedId(), veh, -1)
--         TriggerEvent("vehiclekeys:client:SetOwner", QBCore.Functions.GetPlate(veh))
--         SetVehicleEngineOn(veh, true, true)
--     end, coords, true)
-- end

-- local function VehicleList()
--     local vehicleMenu = {{
--         header = "Vehicle List",
--         isMenuHeader = true
--     }}
--     for k, v in pairs(Config.Vehicles) do
--         vehicleMenu[#vehicleMenu + 1] = {
--             header = v,
--             txt = "Vehicle: " .. v .. "",
--             params = {
--                 event = "qb-mechanicjob:client:SpawnListVehicle",
--                 args = {
--                     headername = v,
--                     spawnName = k
--                 }
--             }
--         }
--     end
--     vehicleMenu[#vehicleMenu + 1] = {
--         header = "⬅ Close Menu",
--         txt = "",
--         params = {
--             event = "qb-menu:client:closeMenu"
--         }

--     }
--     exports['qb-menu']:openMenu(vehicleMenu)
-- end

-- local function CheckStatus()
--     local plate = QBCore.Functions.GetPlate(Config.Plates[ClosestPlate].AttachedVehicle)
--     SendStatusMessage(VehicleStatus[plate])
-- end

-- local function RepairPart(part)
--     local PartData = Config.RepairCostAmount[part]
--     local hasitem = false
--     local indx = 0
--     local countitem = 0
--     QBCore.Functions.TriggerCallback('qb-inventory:server:GetStashItems', function(StashItems)
--         for k, v in pairs(StashItems) do
--             if v.name == PartData.item then
--                 hasitem = true
--                 if v.amount >= PartData.costs then
--                     countitem = v.amount
--                     indx = k
--                 end
--             end
--         end
--         if hasitem and countitem >= PartData.costs then
--             TriggerEvent('animations:client:EmoteCommandStart', {"mechanic"})
--             QBCore.Functions.Progressbar("repair_part", "Repairing " .. Config.ValuesLabels[part],
--                 math.random(5000, 10000), false, true, {
--                     disableMovement = true,
--                     disableCarMovement = true,
--                     disableMouse = false,
--                     disableCombat = true
--                 }, {}, {}, {}, function() -- Done
--                     TriggerEvent('animations:client:EmoteCommandStart', {"c"})
--                     if (countitem - PartData.costs) <= 0 then
--                         StashItems[indx] = nil
--                     else
--                         countitem = (countitem - PartData.costs)
--                         StashItems[indx].amount = countitem
--                     end
--                     TriggerEvent('qb-vehicletuning:client:RepaireeePart', part)
--                     TriggerServerEvent('qb-inventory:server:SaveStashItems', "mechanicstash", StashItems)
--                     SetTimeout(250, function()
--                         PartsMenu()
--                     end)
--                 end, function()
--                     QBCore.Functions.Notify("Repair Cancelled", "error")
--                 end)
--         else
--             QBCore.Functions.Notify('There Are Not Enough Materials In The Safe', 'error')
--         end
--     end, "mechanicstash")
-- end

-- -- Events

-- RegisterNetEvent("qb-mechanicjob:client:UnattachVehicle", function(data)
--     UnattachVehicle()
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:PartsMenu", function(data)
--     PartsMenu()
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:PartMenu", function(data)
--     PartMenu(data)
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:NoDamage", function(data)
--     NoDamage()
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:CheckStatus", function(data)
--     CheckStatus()
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:SpawnListVehicle", function(data)
--     local vehicleSpawnName = data.spawnName
--     SpawnListVehicle(vehicleSpawnName)
-- end)

-- RegisterNetEvent("qb-mechanicjob:client:RepairPart", function(data)
--     local partData = data.part
--     RepairPart(partData)
-- end)

-- RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()
--     QBCore.Functions.GetPlayerData(function(PlayerData)
--         PlayerJob = PlayerData.job
--         if PlayerData.job.onduty then
--             if Config.Jobs[PlayerData.job.name] then
--                 TriggerServerEvent("QBCore:ToggleDuty")
--             end
--         end
--     end)
--     QBCore.Functions.TriggerCallback('qb-vehicletuning:server:GetAttachedVehicle', function(plates)
--         for k, v in pairs(plates) do
--             Config.Plates[k].AttachedVehicle = v.AttachedVehicle
--         end
--     end)

--     QBCore.Functions.TriggerCallback('qb-vehicletuning:server:GetDrivingDistances', function(retval)
--         DrivingDistance = retval
--     end)
-- end)

-- RegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)
--     PlayerJob = JobInfo
--     onDuty = PlayerJob.onduty

--     for k, v in ipairs(Config.Locations['duty']) do
--         DeleteTarget(stashTargetBoxID .. k)
--     end
--     for k, v in ipairs(Config.Locations['stash']) do
--         DeleteTarget(stashTargetBoxID .. k)
--     end
--     RegisterDutyTarget()

--     if onDuty then
--         RegisterStashTarget()
--     end
-- end)

-- RegisterNetEvent('QBCore:Client:SetDuty', function(duty)
--     onDuty = duty

--     for k, v in ipairs(Config.Locations['duty']) do
--         DeleteTarget(k)
--     end
--     for k, v in ipairs(Config.Locations['stash']) do
--         DeleteTarget(k)
--     end
--     RegisterDutyTarget()

--     if onDuty then
--         RegisterStashTarget()
--     end
-- end)

-- RegisterNetEvent('qb-vehicletuning:client:SetAttachedVehicle', function(veh, key)
--     if veh ~= false then
--         Config.Plates[key].AttachedVehicle = veh
--     else
--         Config.Plates[key].AttachedVehicle = nil
--     end
-- end)

-- RegisterNetEvent('qb-vehicletuning:client:RepaireeePart', function(part)
--     local veh = Config.Plates[ClosestPlate].AttachedVehicle
--     local plate = QBCore.Functions.GetPlate(veh)
--     if part == "engine" then
--         SetVehicleEngineHealth(veh, Config.MaxStatusValues[part])
--         TriggerServerEvent("vehiclemod:server:updatePart", plate, "engine", Config.MaxStatusValues[part])
--     elseif part == "body" then
--         local enhealth = GetVehicleEngineHealth(veh)
--         SetVehicleBodyHealth(veh, Config.MaxStatusValues[part])
--         TriggerServerEvent("vehiclemod:server:updatePart", plate, "body", Config.MaxStatusValues[part])
--         SetVehicleFixed(veh)
--         SetVehicleEngineHealth(veh, enhealth)
--     else
--         TriggerServerEvent("vehiclemod:server:updatePart", plate, part, Config.MaxStatusValues[part])
--     end
--     QBCore.Functions.Notify("The " .. Config.ValuesLabels[part] .. " Is Repaired!")
-- end)

-- RegisterNetEvent('vehiclemod:client:setVehicleStatus', function(plate, status)
--     VehicleStatus[plate] = status
-- end)

-- RegisterNetEvent('vehiclemod:client:getVehicleStatus', function(plate, status)
--     if not (IsPedInAnyVehicle(PlayerPedId(), false)) then
--         local veh = GetVehiclePedIsIn(PlayerPedId(), true)
--         if veh ~= nil and veh ~= 0 then
--             local vehpos = GetEntityCoords(veh)
--             local pos = GetEntityCoords(PlayerPedId())
--             if #(pos - vehpos) < 5.0 then
--                 if not IsThisModelABicycle(GetEntityModel(veh)) then
--                     local plate = QBCore.Functions.GetPlate(veh)
--                     if VehicleStatus[plate] ~= nil then
--                         SendStatusMessage(VehicleStatus[plate])
--                     else
--                         QBCore.Functions.Notify("Status Unknown", "error")
--                     end
--                 else
--                     QBCore.Functions.Notify("Not A Valid Vehicle", "error")
--                 end
--             else
--                 QBCore.Functions.Notify("You Are Not Close Enough To The Vehicle", "error")
--             end
--         else
--             QBCore.Functions.Notify("You Must Be In The Vehicle First", "error")
--         end
--     else
--         QBCore.Functions.Notify("You Must Be Outside The Vehicle", "error")
--     end
-- end)

-- RegisterNetEvent('vehiclemod:client:fixEverything', function()
--     if (IsPedInAnyVehicle(PlayerPedId(), false)) then
--         local veh = GetVehiclePedIsIn(PlayerPedId(), false)
--         if not IsThisModelABicycle(GetEntityModel(veh)) and GetPedInVehicleSeat(veh, -1) == PlayerPedId() then
--             local plate = QBCore.Functions.GetPlate(veh)
--             TriggerServerEvent("vehiclemod:server:fixEverything", plate)
--         else
--             QBCore.Functions.Notify("You Are Not The Driver Or On A Bicycle", "error")
--         end
--     else
--         QBCore.Functions.Notify("You Are Not In A Vehicle", "error")
--     end
-- end)

-- RegisterNetEvent('vehiclemod:client:setPartLevel', function(part, level)
--     if (IsPedInAnyVehicle(PlayerPedId(), false)) then
--         local veh = GetVehiclePedIsIn(PlayerPedId(), false)
--         if not IsThisModelABicycle(GetEntityModel(veh)) and GetPedInVehicleSeat(veh, -1) == PlayerPedId() then
--             local plate = QBCore.Functions.GetPlate(veh)
--             if part == "engine" then
--                 SetVehicleEngineHealth(veh, level)
--                 TriggerServerEvent("vehiclemod:server:updatePart", plate, "engine", GetVehicleEngineHealth(veh))
--             elseif part == "body" then
--                 SetVehicleBodyHealth(veh, level)
--                 TriggerServerEvent("vehiclemod:server:updatePart", plate, "body", GetVehicleBodyHealth(veh))
--             else
--                 TriggerServerEvent("vehiclemod:server:updatePart", plate, part, level)
--             end
--         else
--             QBCore.Functions.Notify("You Are Not The Driver Or On A Bicycle", "error")
--         end
--     else
--         QBCore.Functions.Notify("You Are Not The Driver Or On A Bicycle", "error")
--     end
-- end)

-- RegisterNetEvent('vehiclemod:client:repairPart', function(part, level, needAmount)
--     if not IsPedInAnyVehicle(PlayerPedId(), false) then
--         local veh = GetVehiclePedIsIn(PlayerPedId(), true)
--         if veh ~= nil and veh ~= 0 then
--             local vehpos = GetEntityCoords(veh)
--             local pos = GetEntityCoords(PlayerPedId())
--             if #(pos - vehpos) < 5.0 then
--                 if not IsThisModelABicycle(GetEntityModel(veh)) then
--                     local plate = QBCore.Functions.GetPlate(veh)
--                     if VehicleStatus[plate] ~= nil and VehicleStatus[plate][part] ~= nil then
--                         local lockpickTime = (1000 * level)
--                         if part == "body" then
--                             lockpickTime = lockpickTime / 10
--                         end
--                         ScrapAnim(lockpickTime)
--                         QBCore.Functions.Progressbar("repair_advanced", "Repair Vehicle", lockpickTime, false, true, {
--                             disableMovement = true,
--                             disableCarMovement = true,
--                             disableMouse = false,
--                             disableCombat = true
--                         }, {
--                             animDict = "mp_car_bomb",
--                             anim = "car_bomb_mechanic",
--                             flags = 16
--                         }, {}, {}, function() -- Done
--                             openingDoor = false
--                             ClearPedTasks(PlayerPedId())
--                             if part == "body" then
--                                 local enhealth = GetVehicleEngineHealth(veh)
--                                 SetVehicleBodyHealth(veh, GetVehicleBodyHealth(veh) + level)
--                                 SetVehicleFixed(veh)
--                                 SetVehicleEngineHealth(veh, enhealth)
--                                 TriggerServerEvent("vehiclemod:server:updatePart", plate, part,
--                                     GetVehicleBodyHealth(veh))
--                                 TriggerServerEvent("QBCore:Server:RemoveItem", Config.RepairCost[part], needAmount)
--                                 TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items[Config.RepairCost[part]],
--                                     "remove")
--                             elseif part ~= "engine" then
--                                 TriggerServerEvent("vehiclemod:server:updatePart", plate, part,
--                                     GetVehicleStatus(plate, part) + level)
--                                 TriggerServerEvent("QBCore:Server:RemoveItem", Config.RepairCost[part], level)
--                                 TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items[Config.RepairCost[part]],
--                                     "remove")
--                             end
--                         end, function() -- Cancel
--                             openingDoor = false
--                             ClearPedTasks(PlayerPedId())
--                             QBCore.Functions.Notify("Process Canceled", "error")
--                         end)
--                     else
--                         QBCore.Functions.Notify("Not A Valid Part", "error")
--                     end
--                 else
--                     QBCore.Functions.Notify("Not A Valid Vehicle", "error")
--                 end
--             else
--                 QBCore.Functions.Notify("You Are Not Close Enough To The Vehicle", "error")
--             end
--         else
--             QBCore.Functions.Notify("You Must Be In The Vehicle First", "error")
--         end
--     else
--         QBCore.Functions.Notify("Youre Not In a Vehicle", "error")
--     end
-- end)

-- RegisterNetEvent('qb-mechanicjob:client:target:OpenStash', function()
--     TriggerEvent("inventory:client:SetCurrentStash", insideStashZone)
--     TriggerServerEvent("inventory:server:OpenInventory", "stash", insideStashZone, {
--         maxweight = 4000000,
--         slots = 500
--     })
-- end)

-- RegisterNetEvent('qb-mechanicjob:client:target:CloseMenu', function()
--     DestroyVehiclePlateZone(ClosestPlate)
--     RegisterVehiclePlateZone(ClosestPlate, Config.Plates[ClosestPlate])

--     TriggerEvent('qb-menu:client:closeMenu')
-- end)

-- -- Threads

-- CreateThread(function()
--     local wait = 500
--     while not LocalPlayer.state.isLoggedIn do
--         -- do nothing
--         Wait(wait)
--     end

--     RegisterGarageZone()
--     RegisterDutyTarget()
--     RegisterStashTarget()
--     SetVehiclePlateZones()

--     while true do
--         wait = 500
--         SetClosestPlate()

--         if Config.Jobs[PlayerJob.name] then

--             if isInsideDutyZone then
--                 wait = 0
--                 if IsControlJustPressed(0, 38) then
--                     TriggerServerEvent("QBCore:ToggleDuty")
--                 end
--             end

--             if onDuty then
--                 if isInsideStashZone then
--                     wait = 0
--                     if IsControlJustPressed(0, 38) then
--                         TriggerEvent("qb-mechanicjob:client:target:OpenStash")
--                     end
--                 end

--                 if isInsideGarageZone then
--                     wait = 0
--                     local inVehicle = IsPedInAnyVehicle(PlayerPedId())
--                     if IsControlJustPressed(0, 38) then
--                         if inVehicle then
--                             DeleteVehicle(GetVehiclePedIsIn(PlayerPedId()))
--                             exports['qb-core']:HideText()
--                         else
--                             VehicleList()
--                             exports['qb-core']:HideText()
--                         end
--                     end
--                 end

--                 if isInsideVehiclePlateZone then
--                     wait = 0
--                     local attachedVehicle = Config.Plates[ClosestPlate].AttachedVehicle
--                     local coords = Config.Plates[ClosestPlate].coords
--                     if attachedVehicle then
--                         if IsControlJustPressed(0, 38) then
--                             exports['qb-core']:HideText()
--                             OpenMenu()
--                         end
--                     else
--                         if IsControlJustPressed(0, 38) and IsPedInAnyVehicle(PlayerPedId()) then
--                             local veh = GetVehiclePedIsIn(PlayerPedId())
--                             DoScreenFadeOut(150)
--                             Wait(150)
--                             Config.Plates[ClosestPlate].AttachedVehicle = veh
--                             SetEntityCoords(veh, coords)
--                             SetEntityHeading(veh, coords.w)
--                             FreezeEntityPosition(veh, true)
--                             Wait(500)
--                             DoScreenFadeIn(150)
--                             TriggerServerEvent('qb-vehicletuning:server:SetAttachedVehicle', veh, ClosestPlate)

--                             DestroyVehiclePlateZone(ClosestPlate)
--                             RegisterVehiclePlateZone(ClosestPlate, Config.Plates[ClosestPlate])
--                         end
--                     end
--                 end
--             end
--         end
--         Wait(wait)
--     end
-- end)

-- CreateThread(function()
--     while true do
--         Wait(1000)
--         if (IsPedInAnyVehicle(PlayerPedId(), false)) then
--             local veh = GetVehiclePedIsIn(PlayerPedId(), false)
--             if not IsThisModelABicycle(GetEntityModel(veh)) and GetPedInVehicleSeat(veh, -1) == PlayerPedId() then
--                 local engineHealth = GetVehicleEngineHealth(veh)
--                 local bodyHealth = GetVehicleBodyHealth(veh)
--                 local plate = QBCore.Functions.GetPlate(veh)
--                 if VehicleStatus[plate] == nil then
--                     TriggerServerEvent("vehiclemod:server:setupVehicleStatus", plate, engineHealth, bodyHealth)
--                 else
--                     TriggerServerEvent("vehiclemod:server:updatePart", plate, "engine", engineHealth)
--                     TriggerServerEvent("vehiclemod:server:updatePart", plate, "body", bodyHealth)
--                     effectTimer = effectTimer + 1
--                     if effectTimer >= math.random(10, 15) then
--                         ApplyEffects(veh)
--                         effectTimer = 0
--                     end
--                 end
--             else
--                 effectTimer = 0
--                 Wait(1000)
--             end
--         else
--             effectTimer = 0
--             Wait(2000)
--         end
--     end
-- end)

-- Config = {}

-- -- **** IMPORTANT ****
-- -- UseTarget should only be set to true when using qb-target
-- Config.UseTarget = GetConvar('UseTarget', 'false') == 'true'
-- Config.Targets = {}

-- Config.AttachedVehicle = nil

-- Config.AuthorizedIds = {
--     -- "insertcitizenidhere",
-- }

-- Config.MaxStatusValues = {
--     ["engine"] = 1000.0,
--     ["body"] = 1000.0,
--     ["radiator"] = 100,
--     ["axle"] = 100,
--     ["brakes"] = 100,
--     ["clutch"] = 100,
--     ["fuel"] = 100
-- }

-- Config.ValuesLabels = {
--     ["engine"] = "Motor",
--     ["body"] = "Body",
--     ["radiator"] = "Radiator",
--     ["axle"] = "Drive Shaft",
--     ["brakes"] = "Brakes",
--     ["clutch"] = "Clutch",
--     ["fuel"] = "Fuel Ttank"
-- }

-- Config.RepairCost = {
--     ["body"] = "plastic",
--     ["radiator"] = "plastic",
--     ["axle"] = "steel",
--     ["brakes"] = "iron",
--     ["clutch"] = "aluminum",
--     ["fuel"] = "plastic"
-- }

-- Config.RepairCostAmount = {
--     ["engine"] = {
--         item = "metalscrap",
--         costs = 2
--     },
--     ["body"] = {
--         item = "plastic",
--         costs = 3
--     },
--     ["radiator"] = {
--         item = "steel",
--         costs = 5
--     },
--     ["axle"] = {
--         item = "aluminum",
--         costs = 7
--     },
--     ["brakes"] = {
--         item = "copper",
--         costs = 5
--     },
--     ["clutch"] = {
--         item = "copper",
--         costs = 6
--     },
--     ["fuel"] = {
--         item = "plastic",
--         costs = 5
--     }
-- }

-- Config.Businesses = {"LSC", "Redline", "Paleto", "skidddoctor"}

-- Config.Plates = {
--     [1] = {
--         coords = vector4(-327.07, -144.46, 39.02, 249.58), -- LSC
--         boxData = {
--             heading = 249.58,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     },
--     [2] = {
--         coords = vector4(-325.21, -139.13, 39.02, 260.15), -- LSC
--         boxData = {
--             heading = 260.15,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     },
--     [3] = {
--         coords = vector4(-582.89, -917.62, 23.44, 89.75), -- REDLINE
--         boxData = {
--             heading = 89.75,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     },
--     [4] = {
--         coords = vector4(-582.94, -924.61, 23.89, 90.06), -- REDLINE
--         boxData = {
--             heading = 90.06,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     },
--     [5] = {
--         coords = vector4(-231.55, 6224.86, 31.72, 223.65), -- Paleto
--         boxData = {
--             heading = 223.65,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     },
--     [6] = {
--         coords = vector4(124.11, -3022.48, 7.04, 264.26), -- SkiddDoctor
--         boxData = {
--             heading = 264.26,
--             length = 5,
--             width = 2.5,
--             debugPoly = false
--         },
--         AttachedVehicle = nil
--     }
-- }

-- Config.Jobs = {
--     ["lsc"] = true, 
--     ["redline"] = true,
--     ["paleto"] = true,
-- }

-- Config.Locations = {
--     ["exit"] = {
--         [1] = {vector3(-560.01, -930.49, 23.87)},
--         [2] = {vector3(-353.57, -116.08, 38.7)},
--         [3] = {vector3(-231.38, 6234.88, 31.5)},
--         [4] = {vector3(156.43, -3018.12, 7.04)}
--     },
--     ["duty"] = {
--         [1] = {vector3(-588.96, -932.33, 23.89)},
--         [2] = {vector3(-341.24, -161.87, 44.59)},
--         [3] = {vector3(-202.73, 6240.84, 31.75)},
--         [4] = {vector3(133.34, -3013.56, 10.7)}
--     },
--     ["stash"] = {
--         [1] = {vector3(-593.95, -935.88, 28.14)},
--         [2] = {vector3(-349.08, -170.6, 39.01)},
--         [3] = {vector3(-225.42, 6224.44, 31.72)},
--         [4] = {vector3(127.23, -3008.17, 10.7)}
--     },
--     ["vehicle"] = {
--         [1] = {vector4(-561.87, -906.66, 23.86, 268.52)},
--         [2] = {vector4(-356.53, -160.43, 38.73, 25.37)},
--         [3] = {vector4(-241.32, 6253.56, 31.49, 220.9)},
--         [4] = {vector4(130.89, -2990.78, 7.03, 322.59)}
--     }
-- }

-- Config.Vehicles = {
--     ["flatbed"] = "Flatbed",
--     ["towtruck"] = "Towtruck",
--     ["minivan"] = "Minivan (Rental Car)",
--     ["blista"] = "Blista"
-- }

-- Config.MinimalMetersForDamage = {
--     [1] = {
--         min = 8000,
--         max = 12000,
--         multiplier = {
--             min = 1,
--             max = 8
--         }
--     },
--     [2] = {
--         min = 12000,
--         max = 16000,
--         multiplier = {
--             min = 8,
--             max = 16
--         }
--     },
--     [3] = {
--         min = 12000,
--         max = 16000,
--         multiplier = {
--             min = 16,
--             max = 24
--         }
--     }
-- }

-- Config.Damages = {
--     ["radiator"] = "Radiator",
--     ["axle"] = "Drive Shaft",
--     ["brakes"] = "Brakes",
--     ["clutch"] = "Clutch",
--     ["fuel"] = "Fuel Tank"
-- }
